{"version":3,"sources":["components/TodoListFooter/TodoListFooter.module.scss","components/AddNewItemForm/AddNewItemForm.module.scss","components/TodoListTasks/TodoListTask/TodoListTask.module.scss","components/TodoListHeader/TodoListHeader.module.scss","components/TodoListTasks/TodoListTasks.module.scss","components/TodoListFooter/TodoListFooter.jsx","components/TodoListTasks/TodoListTask/TodoListTask.jsx","components/TodoListTasks/TodoListTasks.jsx","components/AddNewItemForm/AddNewItemForm.jsx","components/TodoListHeader/TodoListHeader.jsx","components/TodoList/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","todoList__footer","footer__button","footer__button-active","footer__buttons","addNewItemForm__input","error","addNewItemForm__buttons","checkbox","done","todoList__header","todoList__example","TodoList__tasks","TodoListFooter","state","isHidden","onAllFilterClick","_this","props","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","setState","onHideFiltersClick","render","classForAll","filterValue","classForCompleted","classForActive","react_default","a","createElement","className","styles","Fragment","onClick","concat","React","Component","TodoListTask","editMode","onIsDoneChanged","e","changeTask","task","id","isDone","currentTarget","checked","activateEditMode","disableEditMode","onTitleChanged","title","value","onDoubleClick","onChange","type","priority","onBlur","autoFocus","TodoListTasks","taskElements","tasks","map","item","index","TodoListTasks_TodoListTask_TodoListTask","key","AddNewItemForm","onChangeInputValue","newInputValue","addNewItemForm","this","placeholder","onKeyPress","TodoListHeader","Object","classCallCheck","_super","call","onAddTaskClick","text","taskText","includes","lastIndexOf","slice","substring","length","alert","addNewTask","onKeyPressInputValue","newValue","components_AddNewItemForm_AddNewItemForm","TodoList","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","newTaskId","newText","newTask","toConsumableArray","taskId","obj","newTasks","objectSpread2","newFilterValue","components_TodoListHeader_TodoListHeader","components_TodoListTasks_TodoListTasks","filter","components_TodoListFooter_TodoListFooter","App","todoLists","newTodoListName","newTodoListId","addNewTodoList","newTodoLIst","changeNewTodoListName","newName","window","tl","components_TodoList_TodoList","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,iBAAA,yCAAAC,eAAA,uCAAAC,wBAAA,8CAAAC,gBAAA,2DCAlBL,EAAAC,QAAA,CAAkBK,sBAAA,8CAAAC,MAAA,8BAAAC,wBAAA,mECAlBR,EAAAC,QAAA,CAAkBQ,SAAA,+BAAAC,KAAA,6CCAlBV,EAAAC,QAAA,CAAkBU,iBAAA,yCAAAC,kBAAA,8DCAlBZ,EAAAC,QAAA,CAAkBY,gBAAA,uQC8DHC,8MA1DXC,MAAM,CACFC,UAAU,KAGdC,iBAAmB,WACfC,EAAKC,MAAMC,aAAa,UAE5BC,uBAAyB,WACrBH,EAAKC,MAAMC,aAAa,gBAE5BE,oBAAsB,WAClBJ,EAAKC,MAAMC,aAAa,aAE5BG,mBAAqB,WACjBL,EAAKM,SACD,CACIR,UAAU,OAItBS,mBAAqB,WACjBP,EAAKM,SACD,CACIR,UAAU,OAMtBU,OAAS,WACL,IAAMC,EAAyC,QAA3BT,EAAKC,MAAMS,YAAwB,wBAA0B,GAC3EC,EAA+C,cAA3BX,EAAKC,MAAMS,YAA8B,wBAA0B,GACvFE,EAA4C,WAA3BZ,EAAKC,MAAMS,YAA2B,wBAA0B,GACvF,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOjC,mBAChBgB,EAAKH,MAAMC,UAAce,EAAAC,EAAAC,cAAAF,EAAAC,EAAAI,SAAA,KACxBL,EAAAC,EAAAC,cAAA,UAAQI,QAASnB,EAAKD,iBACdiB,UAAS,GAAAI,OAAKH,IAAOhC,eAAZ,KAAAmC,OAA8BH,IAAOR,KADtD,OAIAI,EAAAC,EAAAC,cAAA,UAAQI,QAASnB,EAAKG,uBACda,UAAS,GAAAI,OAAKH,IAAOhC,eAAZ,KAAAmC,OAA8BH,IAAON,KADtD,aAIAE,EAAAC,EAAAC,cAAA,UAAQI,QAASnB,EAAKI,oBAAsBY,UAAS,GAAAI,OAAKH,IAAOhC,eAAZ,KAAAmC,OAA8BH,IAAOL,KAA1F,WAKJC,EAAAC,EAAAC,cAAA,UAAQI,QAASnB,EAAKH,MAAMC,SAAWE,EAAKK,mBAAqBL,EAAKO,mBAC9DS,UAAS,GAAAI,OAAKH,IAAOhC,iBACxBe,EAAKH,MAAMC,SAAW,OAAS,sBArDvBuB,IAAMC,4CCkDpBC,8MAjDX1B,MAAQ,CACJ2B,UAAU,KAEdC,gBAAkB,SAACC,GACf1B,EAAKC,MAAM0B,WAAW3B,EAAKC,MAAM2B,KAAKC,GAAI,CAACC,OAAQJ,EAAEK,cAAcC,aAEvEC,iBAAmB,SAACP,GAChB1B,EAAKM,SAAS,CACVkB,UAAU,OAGlBU,gBAAkB,SAACR,GACf1B,EAAKM,SAAS,CACVkB,UAAU,OAGlBW,eAAgB,SAACT,GACb1B,EAAKC,MAAM0B,WAAW3B,EAAKC,MAAM2B,KAAKC,GAAI,CAACO,MAAMV,EAAEK,cAAcM,WAErE7B,OAAS,WAEL,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAS,IAAAI,OAAMpB,EAAKC,MAAM2B,KAAKE,QAAUb,IAAOzB,MACtD8C,cAAetC,EAAKiC,kBAEfpB,EAAAC,EAAAC,cAAA,YACMf,EAAKH,MAAM2B,UAAaX,EAAAC,EAAAC,cAAA,WACtBF,EAAAC,EAAAC,cAAA,SAAOC,UAAS,GAAAI,OAAKH,IAAM,UACpBsB,SAAUvC,EAAKyB,gBACfe,KAAK,WACLR,QAAShC,EAAKC,MAAM2B,KAAKE,SAChCjB,EAAAC,EAAAC,cAAA,YAAOf,EAAKC,MAAM2B,KAAKC,GAAK,EAA5B,KAAiC7B,EAAKC,MAAM2B,KAAKQ,OAAavB,EAAAC,EAAAC,cAAA,4BAAoBf,EAAKC,MAAM2B,KAAKa,WAErGzC,EAAKH,MAAM2B,UAAaX,EAAAC,EAAAC,cAAA,WACpBf,EAAKC,MAAM2B,KAAKC,GAAK,EADD,KACKhB,EAAAC,EAAAC,cAAA,SAAOyB,KAAK,OACLE,OAAQ1C,EAAKkC,gBACbK,SAAUvC,EAAKmC,eACfQ,WAAW,EACXN,MAAOrC,EAAKC,MAAM2B,KAAKQ,wBAvCrDf,IAAMC,WCkBlBsB,8MAbXpC,OAAS,WACL,IAAMqC,EAAe7C,EAAKC,MAAM6C,MAAMC,IAAI,SAACC,EAAKC,GAAN,OAC1CpC,EAAAC,EAAAC,cAACmC,EAAD,CAAetB,KAAMoB,EACNrB,WAAY3B,EAAKC,MAAM0B,WACvBwB,IAAKH,EAAKnB,OACzB,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOtB,iBACnBkD,gBATYxB,IAAMC,2CCmBnB8B,8MArBXC,mBAAqB,SAAC3B,GAClB,IAAI4B,EAAgB5B,EAAEK,cAAcM,MACpCrC,EAAKC,MAAMsC,SAASe,2DAIpB,OACIzC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOsC,gBACnB1C,EAAAC,EAAAC,cAAA,SAAOC,UAAS,GAAAI,OAAKH,IAAO7B,sBAAZ,KAAAgC,OAAqCoC,KAAKvD,MAAMZ,OAAS4B,IAAO5B,OACzEmD,KAAK,OACLiB,YAAaD,KAAKvD,MAAMwD,YACxBpB,MAAOmB,KAAKvD,MAAMoC,MAClBqB,WAAYF,KAAKvD,MAAMyD,WACvBnB,SAAUiB,KAAKH,qBAEtBxC,EAAAC,EAAAC,cAAA,UAAQI,QAASqC,KAAKvD,MAAMkB,QAASH,UAAWC,IAAO3B,yBAAvD,eAhBa+B,IAAMC,WCkEpBqC,oDAhEX,SAAAA,EAAY1D,GAAO,IAAAD,EAAA,OAAA4D,OAAAC,EAAA,EAAAD,CAAAJ,KAAAG,IACf3D,EAAA8D,EAAAC,KAAAP,KAAMvD,IAGVJ,MAAQ,CACJR,OAAO,EACPgD,MAAO,IANQrC,EASnBgE,eAAiB,SAACtC,GACd,IAIIe,EACAwB,EALAC,EAAWlE,EAAKH,MAAMwC,MAM1B,GALArC,EAAKM,SAAS,CACV+B,MAAO,KAIP6B,EAASC,SAAS,MAAO,CACzB,IAAIlB,EAAQiB,EAASE,YAAY,MACjCH,EAAOC,EAASG,MAAM,EAAGpB,GACzBR,EAAWyB,EAASI,UAAUJ,EAASK,OAAQtB,EAAQ,QAEvDgB,EAAOC,EACPzB,EAAW,MAEE,KAAbyB,GACAlE,EAAKM,SAAS,CACVjB,OAAO,IAEXmF,MAAM,2BAENxE,EAAKC,MAAMwE,WAAWR,EAAMxB,GAC5BzC,EAAKM,SAAS,CACVjB,OAAO,MAhCAW,EAoCnB0E,qBAAuB,SAAChD,GACN,UAAVA,EAAEyB,KACFnD,EAAKgE,kBAtCMhE,EAyCnBqD,mBAAqB,SAAChB,GAClB,IAAIsC,EAAWtC,EACfrC,EAAKM,SAAS,CACV+B,MAAOsC,KA5CI3E,EA+CnBQ,OAAS,WACL,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOxB,kBACnBoB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAA0BhB,EAAKC,MAAMmC,OACnDvB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOvB,mBAAvB,aAAqDmB,EAAAC,EAAAC,cAAA,+BACrDF,EAAAC,EAAAC,cAAC6D,EAAD,CAAgBzD,QAASnB,EAAKgE,eACdzB,SAAUvC,EAAKqD,mBACfK,WAAY1D,EAAK0E,qBACjBrC,MAAOrC,EAAKH,MAAMwC,MAClBoB,YAAY,eACZpE,MAAOW,EAAKH,MAAMR,UAzD3BW,YADMqB,IAAMC,WCsFpBuD,oDAnFX,SAAAA,EAAY5E,GAAO,IAAAD,EAAA,OAAA4D,OAAAC,EAAA,EAAAD,CAAAJ,KAAAqB,IACf7E,EAAA8D,EAAAC,KAAAP,KAAMvD,IAMV6E,UAAY,WACR,IAAIC,EAAgBC,KAAKC,UAAUjF,EAAKH,OACxCqF,aAAaC,QAAb,aAAA/D,OAAkCpB,EAAKC,MAAM4B,IAAMkD,IATpC/E,EAWnBoF,aAAe,WACX,IAAIvF,EAAQ,CACRiD,MAAO,GACPpC,YAAa,OAEbqE,EAAgBG,aAAaG,QAAb,aAAAjE,OAAkCpB,EAAKC,MAAM4B,KAC5C,MAAjBkD,IACAlF,EAAQmF,KAAKM,MAAMP,IAEG,GAAtBlF,EAAMiD,MAAMyB,OACZvE,EAAKuF,UAAY1F,EAAMiD,MAAMyB,OAE7BvE,EAAKuF,UAAY,EAErBvF,EAAKM,SAAST,IAzBCG,EA2BnBH,MAAQ,CACJiD,MAAO,GACPpC,YAAa,OA7BEV,EA+BnBuF,UAAY,EA/BOvF,EAgCnByE,WAAa,SAACe,EAAS/C,GACnB,IAAIgD,EAAU,CAAC5D,GAAI7B,EAAKuF,UAAWnD,MAAOoD,EAAS1D,QAAQ,EAAOW,SAAUA,GAC5EzC,EAAKuF,YACLvF,EAAKM,SAAS,CACVwC,MAAK,GAAA1B,OAAAwC,OAAA8B,EAAA,EAAA9B,CAAM5D,EAAKH,MAAMiD,OAAjB,CAAwB2C,KAC/B,kBAAMzF,EAAK8E,eArCE9E,EAuCnB2B,WAAa,SAACgE,EAAQC,GAClB,IAAIC,EAAW7F,EAAKH,MAAMiD,MAAMC,IAAI,SAAAnB,GAChC,OAAIA,EAAKC,KAAO8D,EACL/D,EAEAgC,OAAAkC,EAAA,EAAAlC,CAAA,GAAIhC,EAAX,GAAoBgE,KAG5B5F,EAAKM,SAAS,CACVwC,MAAO+C,GACT,kBAAM7F,EAAK8E,eAjDE9E,EAoDnBE,aAAe,SAAC6F,GACZ/F,EAAKM,SAAS,CAACI,YAAaqF,GAAgB,kBAAM/F,EAAK8E,eArDxC9E,EAuDnBQ,OAAS,WACL,OACQK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACiF,EAAD,CAAgB5D,MAAOpC,EAAKC,MAAMmC,MAAOqC,WAAYzE,EAAKyE,aAC1D5D,EAAAC,EAAAC,cAACkF,EAAD,CACInD,MAAO9C,EAAKH,MAAMiD,MAAMoD,OAAO,SAAAtE,GAC3B,OAAQ5B,EAAKH,MAAMa,aACf,IAAK,MACD,OAAO,EACX,IAAK,SACD,OAAQkB,EAAKE,OACjB,IAAK,YACD,OAAOF,EAAKE,OAChB,QACI,OAAO,KAGnBH,WAAY3B,EAAK2B,aAErBd,EAAAC,EAAAC,cAACoF,EAAD,CAAgBzF,YAAaV,EAAKH,MAAMa,YACxBR,aAAcF,EAAKE,iBA3EhCF,kEAKfwD,KAAK4B,sBAPU/D,IAAMC,WCmEd8E,8MA9DXtB,UAAY,WACR,IAAIC,EAAgBC,KAAKC,UAAUjF,EAAKH,OACxCqF,aAAaC,QAAb,gBAAsCJ,MAE1CK,aAAe,WACX,IAAIvF,EAAQ,CACRwG,UAAW,GACXC,gBAAiB,IAEjBvB,EAAgBG,aAAaG,QAAb,iBACC,MAAjBN,IACAlF,EAAQmF,KAAKM,MAAMP,IAEQ,IAA3BlF,EAAMwG,UAAU9B,OAChBvE,EAAKuG,cAAgB1G,EAAMwG,UAAU9B,OAErCvE,EAAKuG,cAAgB,EAEzBvG,EAAKM,SAAST,MAElB0G,cAAgB,IAChB1G,MAAQ,CACJwG,UAAW,GACXC,gBAAiB,oBAErBE,eAAiB,WACb,IAAIC,EAAc,CACd5E,GAAI7B,EAAKuG,cAAgB,EACzBnE,MAAOpC,EAAKH,MAAMyG,iBAEtBtG,EAAKuG,gBACLvG,EAAKM,SAAS,CAAC+F,UAAS,GAAAjF,OAAAwC,OAAA8B,EAAA,EAAA9B,CAAM5D,EAAKH,MAAMwG,WAAjB,CAA4BI,IAAcH,gBAAiB,IAAK,kBAAMtG,EAAK8E,iBAEvG4B,sBAAwB,SAACC,GACrB3G,EAAKM,SAAS,CAACgG,gBAAiBK,OAEpCjC,qBAAuB,SAAChD,GACN,UAAVA,EAAEyB,KACFnD,EAAKwG,oBAGbhG,OAAS,WAEL,OADAoG,OAAO/G,MAAQG,EAAKH,MAEhBgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC6D,EAAD,CAAgBzD,QAASnB,EAAKwG,eACdjE,SAAUvC,EAAK0G,sBACfhD,WAAY1D,EAAK0E,qBACjBjB,YAAY,sBACZpB,MAAOrC,EAAKH,MAAMyG,kBAEnBzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVhB,EAAKH,MAAMwG,UAAUtD,IAAI,SAAA8D,GAAE,OAAIhG,EAAAC,EAAAC,cAAC+F,EAAD,CAAUjF,GAAIgF,EAAGhF,GACPO,MAAOyE,EAAGzE,MACVe,IAAK0D,EAAGhF,4EAzD7E2B,KAAK4B,sBAFK/D,IAAMC,WCOJyF,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAAS3G,OAAOK,EAAAC,EAAAC,cAACqG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.505d7a98.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList__footer\":\"TodoListFooter_todoList__footer__3m-_8\",\"footer__button\":\"TodoListFooter_footer__button__3jLmO\",\"footer__button-active\":\"TodoListFooter_footer__button-active__u9FWn\",\"footer__buttons\":\"TodoListFooter_footer__buttons__K8NYq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addNewItemForm__input\":\"AddNewItemForm_addNewItemForm__input__1_vFe\",\"error\":\"AddNewItemForm_error__29nm7\",\"addNewItemForm__buttons\":\"AddNewItemForm_addNewItemForm__buttons__28mum\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"TodoListTask_checkbox__3y-qn\",\"done\":\"TodoListTask_done__1YEOQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList__header\":\"TodoListHeader_todoList__header__33SYf\",\"todoList__example\":\"TodoListHeader_todoList__example__1YkUP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList__tasks\":\"TodoListTasks_TodoList__tasks__1lFmV\"};","import React from 'react';\r\nimport styles from './TodoListFooter.module.scss';\r\n\r\nclass TodoListFooter extends React.Component {\r\n\r\n    state={\r\n        isHidden: false,\r\n    }\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All')\r\n    }\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter('Completed')\r\n    }\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active')\r\n    }\r\n    onShowFiltersClick = () => {\r\n        this.setState(\r\n            {\r\n                isHidden: false\r\n            }\r\n        )\r\n    }\r\n    onHideFiltersClick = () => {\r\n        this.setState(\r\n            {\r\n                isHidden: true\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    render = () => {\r\n        const classForAll = this.props.filterValue === \"All\" ? \"footer__button-active\" : \"\";\r\n        const classForCompleted = this.props.filterValue === \"Completed\" ? \"footer__button-active\" : \"\";\r\n        const classForActive = this.props.filterValue === \"Active\" ? \"footer__button-active\" : \"\";\r\n        return (\r\n            <div className={styles.todoList__footer}>\r\n                { !this.state.isHidden  &&  <>\r\n                    <button onClick={this.onAllFilterClick}\r\n                            className={`${styles.footer__button} ${styles[classForAll]}`}>\r\n                        All\r\n                    </button>\r\n                    <button onClick={this.onCompletedFilterClick}\r\n                            className={`${styles.footer__button} ${styles[classForCompleted]}`}>\r\n                        Completed\r\n                    </button>\r\n                    <button onClick={this.onActiveFilterClick } className={`${styles.footer__button} ${styles[classForActive]}`}>\r\n                        Active\r\n                    </button>\r\n                </>\r\n                }\r\n                <button onClick={this.state.isHidden ? this.onShowFiltersClick : this.onHideFiltersClick}\r\n                        className={`${styles.footer__button}`}>\r\n                    {this.state.isHidden ? 'Show' : 'Hide'}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter","import React from 'react';\r\nimport styles from './TodoListTask.module.scss';\r\n\r\nclass TodoListTask extends React.Component {\r\n    state = {\r\n        editMode: false,\r\n    }\r\n    onIsDoneChanged = (e) => {\r\n        this.props.changeTask(this.props.task.id, {isDone: e.currentTarget.checked})\r\n    }\r\n    activateEditMode = (e) =>{\r\n        this.setState({\r\n            editMode: true,\r\n        })\r\n    }\r\n    disableEditMode = (e) =>{\r\n        this.setState({\r\n            editMode: false,\r\n        })\r\n    }\r\n    onTitleChanged =(e)=>{\r\n        this.props.changeTask(this.props.task.id, {title:e.currentTarget.value})\r\n    }\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={` ${this.props.task.isDone && styles.done}` }\r\n           onDoubleClick={this.activateEditMode}\r\n            >\r\n                <div>\r\n                    {!this.state.editMode &&  <div>\r\n                        <input className={`${styles['checkbox']}`}\r\n                               onChange={this.onIsDoneChanged}\r\n                               type=\"checkbox\"\r\n                               checked={this.props.task.isDone}/>\r\n                        <span>{this.props.task.id + 1}: {this.props.task.title}</span><span> - priority: {this.props.task.priority}</span>\r\n                    </div>}\r\n                    {this.state.editMode &&  <div>\r\n                        {this.props.task.id + 1}: <input type=\"text\"\r\n                                                         onBlur={this.disableEditMode}\r\n                                                         onChange={this.onTitleChanged}\r\n                                                         autoFocus={true}\r\n                                                         value={this.props.task.title}\r\n\r\n                    />\r\n                    </div>}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport styles from './TodoListTasks.module.scss';\r\nimport TodoListTask from \"./TodoListTask/TodoListTask\";\r\n\r\n\r\n\r\nclass TodoListTasks extends React.Component {\r\n\r\n    render = () => {\r\n        const taskElements = this.props.tasks.map((item,index) =>(\r\n        <TodoListTask  task={item}\r\n                       changeTask={this.props.changeTask}\r\n                       key={item.id}/>));\r\n        return (\r\n            <div className={styles.TodoList__tasks}>\r\n               {taskElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;","import styles from \"./AddNewItemForm.module.scss\";\r\nimport React from \"react\";\r\n\r\nclass AddNewItemForm extends React.Component {\r\n    onChangeInputValue = (e) => {\r\n        let newInputValue = e.currentTarget.value\r\n        this.props.onChange(newInputValue)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.addNewItemForm}>\r\n                <input className={`${styles.addNewItemForm__input} ${this.props.error && styles.error}`}\r\n                       type=\"text\"\r\n                       placeholder={this.props.placeholder}\r\n                       value={this.props.value}\r\n                       onKeyPress={this.props.onKeyPress}\r\n                       onChange={this.onChangeInputValue}\r\n                />\r\n                <button onClick={this.props.onClick} className={styles.addNewItemForm__buttons}>Add</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;\r\n","import React from 'react';\r\nimport styles from './TodoListHeader.module.scss';\r\nimport AddNewItemForm from \"../AddNewItemForm/AddNewItemForm\";\r\n\r\nclass TodoListHeader extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        error: false,\r\n        value: ''\r\n    }\r\n\r\n    onAddTaskClick = (e) => {\r\n        let taskText = this.state.value;\r\n        this.setState({\r\n            value: ''\r\n        })\r\n        let priority;\r\n        let text;\r\n        if (taskText.includes('::')) {\r\n            let index = taskText.lastIndexOf('::');\r\n            text = taskText.slice(0, index);\r\n            priority = taskText.substring(taskText.length, index + 2)\r\n        } else {\r\n            text = taskText\r\n            priority = 'low'\r\n        }\r\n        if (taskText === '') {\r\n            this.setState({\r\n                error: true\r\n            })\r\n            alert('Please write the task')\r\n        } else {\r\n            this.props.addNewTask(text, priority)\r\n            this.setState({\r\n                error: false\r\n            })\r\n        }\r\n    }\r\n    onKeyPressInputValue = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddTaskClick()\r\n        }\r\n    }\r\n    onChangeInputValue = (value) => {\r\n        let newValue = value;\r\n        this.setState({\r\n            value: newValue\r\n        })\r\n    }\r\n    render = () => {\r\n        return (\r\n            <div className={styles.todoList__header}>\r\n                <h1 className=\"todoList-header__title\">{this.props.title}</h1>\r\n                <div className={styles.todoList__example} >Example:  <span >task::priority</span></div>\r\n                <AddNewItemForm onClick={this.onAddTaskClick}\r\n                                onChange={this.onChangeInputValue}\r\n                                onKeyPress={this.onKeyPressInputValue}\r\n                                value={this.state.value}\r\n                                placeholder='Add new task'\r\n                                error={this.state.error}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListHeader","import React from 'react';\r\nimport TodoListFooter from \"../TodoListFooter/TodoListFooter\";\r\nimport TodoListTasks from \"../TodoListTasks/TodoListTasks\";\r\nimport TodoListHeader from \"../TodoListHeader/TodoListHeader\";\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n    saveState = () => {\r\n        let stateAsString = JSON.stringify(this.state)\r\n        localStorage.setItem(`our-state ${this.props.id}`, stateAsString)\r\n    }\r\n    restoreState = () => {\r\n        let state = {\r\n            tasks: [],\r\n            filterValue: 'All'\r\n        }\r\n        let stateAsString = localStorage.getItem(`our-state ${this.props.id}`)\r\n        if (stateAsString != null) {\r\n            state = JSON.parse(stateAsString)\r\n        }\r\n        if( state.tasks.length != 0) {\r\n            this.newTaskId = state.tasks.length\r\n        } else {\r\n            this.newTaskId = 0\r\n        }\r\n        this.setState(state);\r\n    }\r\n    state = {\r\n        tasks: [],\r\n        filterValue: 'All'\r\n    }\r\n    newTaskId = 0\r\n    addNewTask = (newText, priority) => {\r\n        let newTask = {id: this.newTaskId, title: newText, isDone: false, priority: priority}\r\n        this.newTaskId++\r\n        this.setState({\r\n            tasks: [...this.state.tasks, newTask]\r\n        },() => this.saveState())\r\n    }\r\n    changeTask = (taskId, obj) => {\r\n        let newTasks = this.state.tasks.map(task => {\r\n            if (task.id !== taskId) {\r\n                return task\r\n            } else {\r\n                return {...task, ...obj}\r\n            }\r\n        })\r\n        this.setState({\r\n            tasks: newTasks\r\n        },() => this.saveState())\r\n\r\n    }\r\n    changeFilter = (newFilterValue) => {\r\n        this.setState({filterValue: newFilterValue},() => this.saveState())\r\n    }\r\n    render = () => {\r\n        return (\r\n                <div className=\"todoList\">\r\n                    <TodoListHeader title={this.props.title} addNewTask={this.addNewTask}/>\r\n                    <TodoListTasks\r\n                        tasks={this.state.tasks.filter(task => {\r\n                            switch (this.state.filterValue) {\r\n                                case 'All':\r\n                                    return true\r\n                                case 'Active':\r\n                                    return !task.isDone\r\n                                case 'Completed':\r\n                                    return task.isDone\r\n                                default:\r\n                                    return true\r\n                            }\r\n                        })}\r\n                        changeTask={this.changeTask}\r\n                    />\r\n                    <TodoListFooter filterValue={this.state.filterValue}\r\n                                    changeFilter={this.changeFilter}/>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default TodoList;\r\n\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport TodoList from \"./components/TodoList/TodoList\";\r\nimport AddNewItemForm from \"./components/AddNewItemForm/AddNewItemForm\";\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n    saveState = () => {\r\n        let stateAsString = JSON.stringify(this.state)\r\n        localStorage.setItem(`our-app-state`, stateAsString)\r\n    }\r\n    restoreState = () => {\r\n        let state = {\r\n            todoLists: [],\r\n            newTodoListName: ''\r\n        }\r\n        let stateAsString = localStorage.getItem(`our-app-state`)\r\n        if (stateAsString != null) {\r\n            state = JSON.parse(stateAsString)\r\n        }\r\n        if (state.todoLists.length !== 0) {\r\n            this.newTodoListId = state.todoLists.length\r\n        } else {\r\n            this.newTodoListId = 0\r\n        }\r\n        this.setState(state);\r\n    }\r\n    newTodoListId = 0\r\n    state = {\r\n        todoLists: [],\r\n        newTodoListName: 'Clear TodoList'\r\n    }\r\n    addNewTodoList = () => {\r\n        let newTodoLIst = {\r\n            id: this.newTodoListId + 1,\r\n            title: this.state.newTodoListName\r\n        }\r\n        this.newTodoListId++\r\n        this.setState({todoLists: [...this.state.todoLists, newTodoLIst], newTodoListName: ''}, () => this.saveState())\r\n    }\r\n    changeNewTodoListName = (newName) => {\r\n        this.setState({newTodoListName: newName})\r\n    }\r\n    onKeyPressInputValue = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.addNewTodoList()\r\n        }\r\n    }\r\n    render = () => {\r\n        window.state = this.state\r\n        return (\r\n            <div className=\"App\">\r\n                <AddNewItemForm onClick={this.addNewTodoList}\r\n                                onChange={this.changeNewTodoListName}\r\n                                onKeyPress={this.onKeyPressInputValue}\r\n                                placeholder='Create new TodoList'\r\n                                value={this.state.newTodoListName}\r\n                               />\r\n                               <div className='todoLists'>\r\n                                   {this.state.todoLists.map(tl => <TodoList id={tl.id}\r\n                                                                             title={tl.title}\r\n                                                                             key={tl.id}/>)}\r\n                               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}