{"version":3,"sources":["components/TodoListFooter/TodoListFooter.module.css","components/TodoListHeader/TodoListHeader.module.css","components/TodoListTasks/TodoListTasks.module.css","components/TodoListFooter/TodoListFooter.js","components/TodoListTasks/TodoListTasks.js","components/TodoListHeader/TodoListHeader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","todoList__footer","footer__buttons","todoList__header","header__input","header__buttons","TodoList__tasks","TodoListFooter","render","react_default","a","createElement","className","totoListFooterStyles","React","Component","TodolistTasks","styles","type","checked","TodoListHeader","placeholder","App","components_TodoListHeader_TodoListHeader","TodoListTasks","components_TodoListFooter_TodoListFooter","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,iBAAA,yCAAAC,gBAAA,0DCAlBH,EAAAC,QAAA,CAAkBG,iBAAA,yCAAAC,cAAA,sCAAAC,gBAAA,4DCAlBN,EAAAC,QAAA,CAAkBM,gBAAA,+OCcHC,8MAXXC,OAAS,WACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAqBZ,kBACjCQ,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAqBX,iBAAxC,OACAO,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAqBX,iBAAxC,aACAO,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAqBX,iBAAxC,wBANaY,IAAMC,2BCyBpBC,8MAxBXR,OAAS,WACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWK,IAAOX,iBACnBG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,WAAWC,SAAS,IAChCV,EAAAC,EAAAC,cAAA,oBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,WAAWC,SAAS,IAChCV,EAAAC,EAAAC,cAAA,mBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,WAAWC,SAAS,IAChCV,EAAAC,EAAAC,cAAA,wBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,WAAWC,SAAS,IAChCV,EAAAC,EAAAC,cAAA,uCAlBQG,IAAMC,2BCcnBK,8MAbXZ,OAAS,WACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWK,IAAOd,kBACnBM,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,iBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAWK,IAAOb,cAAec,KAAK,OAAOG,YAAY,kBAChEZ,EAAAC,EAAAC,cAAA,UAAQC,UAAWK,IAAOZ,iBAA1B,sBAPSS,IAAMC,WCiBpBO,8MAbXd,OAAS,WACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,qBAPFX,IAAMC,WCMJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASvB,OAAOC,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dd2f405a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList__footer\":\"TodoListFooter_todoList__footer__cPpA8\",\"footer__buttons\":\"TodoListFooter_footer__buttons__3IkST\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList__header\":\"TodoListHeader_todoList__header__3clHl\",\"header__input\":\"TodoListHeader_header__input__1pPD6\",\"header__buttons\":\"TodoListHeader_header__buttons__2W66_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList__tasks\":\"TodoListTasks_TodoList__tasks__2Fhrq\"};","import React from 'react';\r\nimport totoListFooterStyles from './TodoListFooter.module.css';\r\n\r\nclass TodoListFooter extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <div className={totoListFooterStyles.todoList__footer}>\r\n                <button className={totoListFooterStyles.footer__buttons}>All</button>\r\n                <button className={totoListFooterStyles.footer__buttons}>Completed</button>\r\n                <button className={totoListFooterStyles.footer__buttons}>Active</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter","import React from 'react';\r\nimport styles from './TodoListTasks.module.css';\r\n\r\nclass TodolistTasks extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <div className={styles.TodoList__tasks}>\r\n                <div className=\"todoList-task\">\r\n                    <input type=\"checkbox\" checked={true}/>\r\n                    <span>CSS</span>\r\n                </div>\r\n                <div className=\"todoList-task\">\r\n                    <input type=\"checkbox\" checked={false}/>\r\n                    <span>JS</span>\r\n                </div>\r\n                <div className=\"todoList-task\">\r\n                    <input type=\"checkbox\" checked={false}/>\r\n                    <span>ReactJS</span>\r\n                </div>\r\n                <div className=\"todoList-task\">\r\n                    <input type=\"checkbox\" checked={true}/>\r\n                    <span>Patterns</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodolistTasks;","import React from 'react';\r\nimport styles from './TodoListHeader.module.css';\r\n\r\nclass TodoListHeader extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <div className={styles.todoList__header}>\r\n                <h3 className=\"todoList-header__title\">What to Learn</h3>\r\n                <div className=\"todoList-newTaskForm\">\r\n                    <input className={styles.header__input} type=\"text\" placeholder=\"New task name\"/>\r\n                    <button className={styles.header__buttons}>Add</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListHeader","import React from 'react';\r\nimport './App.css';\r\nimport TodoListFooter from \"./components/TodoListFooter/TodoListFooter\";\r\nimport TodoListTasks from \"./components/TodoListTasks/TodoListTasks\";\r\nimport TodoListHeader from \"./components/TodoListHeader/TodoListHeader\";\r\n\r\nclass App extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                    <TodoListHeader/>\r\n                    <TodoListTasks/>\r\n                    <TodoListFooter/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}