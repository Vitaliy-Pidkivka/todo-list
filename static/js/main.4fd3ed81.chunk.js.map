{"version":3,"sources":["components/TodoListHeader/TodoListHeader.module.css","components/TodoListFooter/TodoListFooter.module.css","components/TodoListTasks/TodoListTasks.module.css","components/TodoListFooter/TodoListFooter.js","components/TodoListTasks/TodoListTask/TodoListTask.js","components/TodoListTasks/TodoListTasks.js","App.js","components/TodoListHeader/TodoListHeader.js","serviceWorker.js","index.js"],"names":["module","exports","todoList__header","header__input","header__buttons","todoList__footer","footer__button","footer__button-active","footer__buttons","TodoList__tasks","TodoListFooter","render","props","classForAll","_this","filterValue","classForCompleted","classForActive","react_default","a","createElement","className","styles","concat","React","Component","TodoListTask","type","checked","isDone","title","priority","TodolistTasks","taskElements","tasks","map","item","index","TodoListTasks_TodoListTask_TodoListTask","Object","assign","key","App","classCallCheck","this","_super","call","state","toggleActiveBtn","onAddTaskClick","setState","toConsumableArray","newTaskTitleRef","current","value","ref","placeholder","onClick","TodoListTasks","components_TodoListFooter_TodoListFooter","createRef","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fd3ed81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList__header\":\"TodoListHeader_todoList__header__3clHl\",\"header__input\":\"TodoListHeader_header__input__1pPD6\",\"header__buttons\":\"TodoListHeader_header__buttons__2W66_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList__footer\":\"TodoListFooter_todoList__footer__cPpA8\",\"footer__button\":\"TodoListFooter_footer__button__vkGau\",\"footer__button-active\":\"TodoListFooter_footer__button-active__TWdtr\",\"footer__buttons\":\"TodoListFooter_footer__buttons__3IkST\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList__tasks\":\"TodoListTasks_TodoList__tasks__2Fhrq\"};","import React from 'react';\r\nimport styles from './TodoListFooter.module.css';\r\n\r\nclass TodoListFooter extends React.Component {\r\n    render = (props) => {\r\n        const  classForAll = this.props.filterValue === \"All\" ? \"footer__button-active\" : \"\";\r\n        const  classForCompleted = this.props.filterValue === \"Completed\" ? \"footer__button-active\" : \"\";\r\n        const  classForActive = this.props.filterValue === \"Active\" ? \"footer__button-active\" : \"\";\r\n        return (\r\n            <div className={styles.todoList__footer}>\r\n                <button className={`${styles.footer__button} ${styles[classForAll]}`}>All</button>\r\n                <button className={`${styles.footer__button} ${styles[classForCompleted]}`}>Completed</button>\r\n                <button className={`${styles.footer__button} ${styles[classForActive]}`}>Active</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter","import React from 'react';\r\n// import styles from './TodoListTask.module.css';\r\n\r\nclass TodoListTask extends React.Component {\r\n    render = (props) => {\r\n        return (\r\n                <div className=\"todoList-task\">\r\n                    <input type=\"checkbox\" checked={this.props.isDone}/>\r\n                    <span>{this.props.title}</span><span>, priority: {this.props.priority}</span>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport styles from './TodoListTasks.module.css';\r\nimport TodoListTask from \"./TodoListTask/TodoListTask\";\r\nclass TodolistTasks extends React.Component {\r\n\r\n    render = (props) => {\r\n\r\n        const taskElements = this.props.tasks.map((item,index) =>(\r\n\r\n        <TodoListTask {...item} key={index}/>));\r\n        return (\r\n            <div className={styles.TodoList__tasks}>\r\n               {taskElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodolistTasks;","import React from 'react';\r\nimport './App.css';\r\nimport TodoListFooter from \"./components/TodoListFooter/TodoListFooter\";\r\nimport TodoListTasks from \"./components/TodoListTasks/TodoListTasks\";\r\nimport TodoListHeader from \"./components/TodoListHeader/TodoListHeader\";\r\nimport styles from \"./components/TodoListHeader/TodoListHeader.module.css\";\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.newTaskTitleRef = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        tasks: [\r\n            {title: 'CSS', isDone: true, priority: 'low',},\r\n            {title: 'JS', isDone: false, priority: 'medium',},\r\n            {title: 'ReactJS', isDone: false, priority: 'high',},\r\n            {title: 'Patterns', isDone: true, priority: 'low',},\r\n        ],\r\n        toggleActiveBtn: 'All'\r\n    }\r\n    onAddTaskClick = () => {\r\n        this.setState({\r\n            tasks: [...this.state.tasks,\r\n                {title: this.newTaskTitleRef.current.value, isDone: false, priority: 'low'}\r\n            ]\r\n        })\r\n        this.newTaskTitleRef.current.value = ''\r\n    }\r\n    render = (props) => {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                    {/*<TodoListHeader/>*/}\r\n                    <div className={styles.todoList__header}>\r\n                        <h3 className=\"todoList-header__title\">What to Learn</h3>\r\n                        <div className=\"todoList-newTaskForm\">\r\n                            <input ref={this.newTaskTitleRef}  className={styles.header__input} type=\"text\"\r\n                                   placeholder=\"New task name\"/>\r\n                            <button  onClick={this.onAddTaskClick}  className={styles.header__buttons}>Add</button>\r\n                        </div>\r\n                    </div>\r\n                    <TodoListTasks tasks={this.state.tasks}/>\r\n                    <TodoListFooter filterValue={this.state.toggleActiveBtn}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport styles from './TodoListHeader.module.css';\r\n\r\nclass TodoListHeader extends React.Component {\r\n    render = (props) => {\r\n        return (\r\n            <div className={styles.todoList__header}>\r\n                <h3 className=\"todoList-header__title\">What to Learn</h3>\r\n                <div className=\"todoList-newTaskForm\">\r\n                    <input className={styles.header__input} type=\"text\" placeholder=\"New task name\"/>\r\n                    <button  className={styles.header__buttons}>Add</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListHeader","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}